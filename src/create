#!/usr/bin/env python3

import os
import json
from shutil import ExecError
import requests
import tempfile
import subprocess
import importlib.machinery

from sqlite3 import adapters
from time import sleep
from pathlib import Path


# For understand ganeti os: https://docs.ganeti.org/docs/ganeti/2.6/man/ganeti-os-interface.html

utilsLoader = importlib.machinery.SourceFileLoader(
    'utils', os.path.dirname(Path(__file__).absolute()) + '/utils.py')
utils = utilsLoader.load_module()
adapterLoader = importlib.machinery.SourceFileLoader(
    'adapter', os.path.dirname(Path(__file__).absolute()) + '/local_file_adapter.py')
adapter = adapterLoader.load_module()
vagrantMetadataLoader = importlib.machinery.SourceFileLoader(
    'vagrant_metadata', os.path.dirname(Path(__file__).absolute()) + '/vagrant_metadata.py')
vagrant_metadata = vagrantMetadataLoader.load_module()


requests_session = requests.session()
requests_session.mount('file://', adapter.LocalFileAdapter())


class EnvException(Exception):
    pass


class NbDiskException(Exception):
    pass


def download(url, path):
    r = requests_session.get(url)
    with open(path, 'wb') as f:
        f.write(r.content)


def decompress(path, tmpdirname):
    with subprocess.Popen(
        ["tar", "--extract", "--file", str(path), "--directory", str(tmpdirname)],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    ) as proc:
        proc.wait()
        if proc.returncode != 0:
            raise Exception(str(proc.stderr.read()))


def ganeti_disks_count():
    return int(os.environ['DISK_COUNT'])

def ganeti_disks():
    return [os.environ[f'DISK_{i}_PATH'] for i in range(0, ganeti_disks_count())]

def import_metadata(path):
    with open(path) as metadata:
        return json.load(metadata)

def box_disks(metadata):
    disks =  metadata.get('disks', [])
    if len(disks) == 0:
        yield 'box.img'
    for i, d in enumerate(disks):
        yield d.get('path', f'box_{i}.img')

def extract_box_disks(metadata, dir):
    return map(lambda p: Path(dir, p), box_disks(metadata))

def check_disks_count(metadata):
    box_disks_count = len(list(box_disks(metadata)))
    if box_disks_count != ganeti_disks_count():
        raise NbDiskException(
            f'''The number of disk not equal with number expected for the type
        Current '{ganeti_disks_count()}', Expected '{box_disks_count}'
      '''
        )

def fetch_box_url():
    box_name = box_url = box_version = box_metadata_url = None
    box_url = os.environ.get('OSP_BOX_URL')
    box_name = os.environ.get('OSP_BOX_NAME')
    box_version = os.environ.get('OSP_BOX_VERSION')
    box_metadata_url = os.environ.get('OSP_BOX_METADATA_URL')

    if box_url:
        return box_url

    if not box_name and not box_metadata_url:
        raise EnvException(f'OSP_BOX_URL or OSP_BOX_NAME or OSP_BOX_METATADATA_URL mandatory')

    return vagrant_metadata.fetch_box_url(box_name, box_metadata_url, box_version)

def main(url):
    with tempfile.TemporaryDirectory() as tmpdirname:
        path = Path(tmpdirname, 'output.box')
        download(url, path)
        decompress(path, tmpdirname)
        metadata = import_metadata(Path(tmpdirname, 'metadata.json'))
        check_disks_count(metadata)

        for src, dst in zip(
            extract_box_disks(metadata, tmpdirname),
            ganeti_disks()
        ):
            utils.toRaw('qcow2').copy(src, dst)


if __name__ == '__main__':
    main(fetch_box_url())
